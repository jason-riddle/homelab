---
# https://esphome.io/guides/configuration-types.html#substitutions
substitutions:
  devicename: "jasons-airgradient-diy-pro"
  upper_devicename: "Jason's AirGradient DIY Pro"


# https://esphome.io/components/esphome.html#esphome-core-configuration
esphome:
  name: "${devicename}"
  friendly_name: "${upper_devicename}"
  platform: ESP8266
  board: d1_mini

  # https://esphome.io/components/esphome.html#on-boot
  on_boot:
    priority: 800
    then:
      - lambda: >-
          ESP_LOGD("main", "ON BOOT!");

  # https://esphome.io/components/esphome.html#on-shutdown
  on_shutdown:
    priority: 600
    then:
      - lambda: >-
          ESP_LOGD("main", "ON SHUTDOWN!");


# https://esphome.io/components/logger
logger:
  level: DEBUG
  logs:
    adc: INFO
    captive_portal: INFO
    deep_sleep: INFO
    htu21d: INFO
    i2c: INFO
    logger: INFO
    mqtt.client: INFO
    mqtt.component: INFO
    mqtt.sensor: INFO
    mqtt.switch: INFO
    mqtt: INFO
    ota: INFO
    restart: INFO
    sensor: INFO
    switch.gpio: INFO
    switch: INFO
    uptime.sensor: INFO
    web_server: INFO
    wifi_signal.sensor: INFO


# Enable Home Assistant API
# https://esphome.io/components/api
api:
  password: ""


# https://esphome.io/components/ota
ota:
  safe_mode: true
  password: ""


# https://esphome.io/components/wifi
wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
  reboot_timeout: 15min

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  # Defaults to device name with no password
  ap: {}
# https://esphome.io/components/captive_portal
captive_portal:


# Provide a /metrics endpoint for Prometheus
# https://esphome.io/components/prometheus
prometheus:
# Please note that enabling this component will take up a lot of memory and may decrease stability, especially on ESP8266.
# https://esphome.io/components/web_server
web_server:
  port: 80
  version: 1


switch:
  # https://esphome.io/components/switch/safe_mode
  # Create a switch for safe_mode in order to flash the device
  # Solution from this thread:
  # https://community.home-assistant.io/t/esphome-flashing-over-wifi-does-not-work/357352/1
  - platform: safe_mode
    name: "Flash Mode (Safe Mode) ON/OFF Switch"
    icon: "mdi:cellphone-arrow-down"

  # https://forum.airgradient.com/t/extending-the-life-span-of-the-pms5003-sensor/114/10
  # Source: https://github.com/airgradienthq/arduino/blob/master/AirGradient.cpp#L123
  - platform: template
    name: "PM Sensor ON/OFF Switch" # PMS5003
    id: pms_switch
    optimistic: true
    turn_on_action:
      - uart.write:
          id: pms5003_uart
          data: [0x42, 0x4D, 0xE4, 0x00, 0x01, 0x01, 0x74]
    turn_off_action:
      - uart.write:
          id: pms5003_uart
          data: [0x42, 0x4D, 0xE4, 0x00, 0x00, 0x01, 0x73]


# Create a button to restart the device
button:
  - platform: restart
    name: "Click Button to Restart AirGradient Device (->)"
    id: restart_button
    icon: "mdi:cellphone-arrow-down"


# Configuration for AirGradient DIY v2 device
# https://www.esphome-devices.com/devices/AirGradient-DIY/
# https://github.com/JacobMillward/airgradient_diy_pro_esphome/blob/main/airgradient_diy_pro.yaml

# https://esphome.io/components/uart
uart:
  - rx_pin: D4
    tx_pin: D3
    baud_rate: 9600
    id: senseair_s8_uart

  - rx_pin: D5
    tx_pin: D6
    baud_rate: 9600
    id: pms5003_uart


# https://esphome.io/components/i2c
i2c:
  sda: D2
  scl: D1
  frequency: 400kHz  # Proposed fix for "Component took a long time for an operation" messages https://github.com/esphome/issues/issues/4717


# https://esphome.io/components/sensor
sensor:
  # PMS5003 https://esphome.io/components/sensor/pmsx003.html
  - platform: pmsx003
    type: PMSX003
    pm_2_5:
      id: pm_2_5
      name: "PM <2.5µm Concentration"
      on_value:
        lambda: |-
          // https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI
          // Borrowed from https://github.com/kylemanna/sniffer/blob/master/esphome/sniffer_common.yaml
          if (id(pm_2_5).state <= 12.0) {
            // good
            id(pm_2_5_aqi).publish_state((50.0 - 0.0) / (12.0 - 0.0) * (id(pm_2_5).state - 0.0) + 0.0);
          } else if (id(pm_2_5).state <= 35.4) {
            // moderate
            id(pm_2_5_aqi).publish_state((100.0 - 51.0) / (35.4 - 12.1) * (id(pm_2_5).state - 12.1) + 51.0);
          } else if (id(pm_2_5).state <= 55.4) {
            // usg
            id(pm_2_5_aqi).publish_state((150.0 - 101.0) / (55.4 - 35.5) * (id(pm_2_5).state - 35.5) + 101.0);
          } else if (id(pm_2_5).state <= 150.4) {
            // unhealthy
            id(pm_2_5_aqi).publish_state((200.0 - 151.0) / (150.4 - 55.5) * (id(pm_2_5).state - 55.5) + 151.0);
          } else if (id(pm_2_5).state <= 250.4) {
            // very unhealthy
            id(pm_2_5_aqi).publish_state((300.0 - 201.0) / (250.4 - 150.5) * (id(pm_2_5).state - 150.5) + 201.0);
          } else if (id(pm_2_5).state <= 350.4) {
            // hazardous
            id(pm_2_5_aqi).publish_state((400.0 - 301.0) / (350.4 - 250.5) * (id(pm_2_5).state - 250.5) + 301.0);
          } else if (id(pm_2_5).state <= 500.4) {
            // hazardous 2
            id(pm_2_5_aqi).publish_state((500.0 - 401.0) / (500.4 - 350.5) * (id(pm_2_5).state - 350.5) + 401.0);
          } else {
            id(pm_2_5_aqi).publish_state(500);
          }
    pm_1_0:
      id: pm10
      name: "PM <1.0µm Concentration"
    pm_10_0:
      id: pm100
      name: "PM <10.0µm Concentration"
    pm_0_3um:
      name: "PM >0.3µm Concentration"
      id: pm_0_3um
    uart_id: pms5003_uart
    update_interval: 30s

  - platform: template
    name: "PM <2.5µm AQI"
    unit_of_measurement: "AQI"
    icon: "mdi:air-filter"
    accuracy_decimals: 0
    id: pm_2_5_aqi

  # SenseAir S8 https://esphome.io/components/sensor/senseair.html
  - platform: senseair
    co2:
      id: co2
      name: "CO2 PPM"
    id: senseair_s8
    uart_id: senseair_s8_uart
    update_interval: 5s

  # SHT30 https://esphome.io/components/sensor/sht3xd.html
  - platform: sht3xd  # Change to sht4x for SHT40
    temperature:
      name: "Temperature"
      id: temp
    humidity:
      name: "Humidity"
      id: humidity
    address: 0x44
    update_interval: 30s

  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_dbm
    update_interval: 60s

  - platform: uptime
    name: "Uptime Sensor"
    id: device_uptime
    update_interval: 60s


# https://esphome.io/components/font
font:
  - file:
      type: gfonts
      family: Poppins
      weight: light
    id: poppins_light
    size: 14
    glyphs: '!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/µ³'

  - file:
      type: gfonts
      family: Poppins
      weight: light
    id: poppins_light_12
    size: 12
    glyphs: '!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/µ³'

  - file: "gfonts://Ubuntu Mono"
    id: ubuntu
    size: 20
    glyphs: '!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/µ³'


# https://esphome.io/components/display
display:
  # https://esphome.io/components/display/ssd1306.html
  # Formatting reference: https://www.tutorialspoint.com/c_standard_library/c_function_printf.htm
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    id: oled_display
    reset_pin: D0
    address: 0x3c
    # rotation: 180°

    # https://esphome.io/components/display/#display-pages
    pages:
      - id: air_quality
        lambda: |-
          it.printf(0, 6, id(ubuntu), "CO2");
          it.printf(128, 6, id(ubuntu), TextAlign::TOP_RIGHT, "%.0f ppm", id(co2).state);
          it.printf(0, 34, id(ubuntu), "AQI");
          it.printf(128, 34, id(ubuntu), TextAlign::TOP_RIGHT, "%.0f    ", id(pm_2_5_aqi).state);
      - id: air_temp
        lambda: |-
          it.printf(0, 6, id(ubuntu), "Tmp");
          it.printf(128, 6, id(ubuntu), TextAlign::TOP_RIGHT, "%.1f°F", id(temp).state*9/5+32);
          it.printf(0, 34, id(ubuntu), "Hmd");
          it.printf(128, 34, id(ubuntu), TextAlign::TOP_RIGHT, "%.1f %%", id(humidity).state);


# https://esphome.io/components/time/index.html
# TODO: For some reason, if I use interval, the interval time is not respected
#       and it immediately restarts, causing an infinite loop.
time:
  - platform: sntp
    on_time:
      # Every 60 minutes, restart the device.
      - seconds: 0
        minutes: /60
        then:
          - lambda: >-
              ESP_LOGD("main", "RESTARTING IN 2 MINS");
          - delay: 2min
          - lambda: >-
              ESP_LOGD("main", "RESTARTING NOW");
          - button.press: restart_button


# https://esphome.io/guides/automations.html#interval
interval:
  # Cycle through page on display
  - interval: 3s
    then:
      - display.page.show_next: oled_display
      - component.update: oled_display

  # https://forum.airgradient.com/t/extending-the-life-span-of-the-pms5003-sensor/114/10
  # Two-minute interval to extend the life span of the PMS5003 sensor
  - interval: 150s
    then:
      - switch.turn_on: pms_switch
      - delay: 30s
      - switch.turn_off: pms_switch
